// Code generated by protoc-gen-go. DO NOT EDIT.
// source: securityService.proto

package baseservicecommon

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type StorageType int32

const (
	StorageType_PERMANENTLY StorageType = 0
	StorageType_ONCE        StorageType = 1
	StorageType_TEMP        StorageType = 2
)

var StorageType_name = map[int32]string{
	0: "PERMANENTLY",
	1: "ONCE",
	2: "TEMP",
}
var StorageType_value = map[string]int32{
	"PERMANENTLY": 0,
	"ONCE":        1,
	"TEMP":        2,
}

func (x StorageType) String() string {
	return proto.EnumName(StorageType_name, int32(x))
}
func (StorageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type KeyGenerate struct {
	Scope    string      `protobuf:"bytes,1,opt,name=scope" json:"scope,omitempty"`
	Bits     int32       `protobuf:"varint,2,opt,name=bits" json:"bits,omitempty"`
	Type     StorageType `protobuf:"varint,3,opt,name=type,enum=baseservice.security.StorageType" json:"type,omitempty"`
	ExpireMs int64       `protobuf:"varint,4,opt,name=expire_ms,json=expireMs" json:"expire_ms,omitempty"`
}

func (m *KeyGenerate) Reset()                    { *m = KeyGenerate{} }
func (m *KeyGenerate) String() string            { return proto.CompactTextString(m) }
func (*KeyGenerate) ProtoMessage()               {}
func (*KeyGenerate) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *KeyGenerate) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *KeyGenerate) GetBits() int32 {
	if m != nil {
		return m.Bits
	}
	return 0
}

func (m *KeyGenerate) GetType() StorageType {
	if m != nil {
		return m.Type
	}
	return StorageType_PERMANENTLY
}

func (m *KeyGenerate) GetExpireMs() int64 {
	if m != nil {
		return m.ExpireMs
	}
	return 0
}

type KeyQuery struct {
	Scope string      `protobuf:"bytes,1,opt,name=scope" json:"scope,omitempty"`
	KeyId int64       `protobuf:"varint,2,opt,name=keyId" json:"keyId,omitempty"`
	Type  StorageType `protobuf:"varint,3,opt,name=type,enum=baseservice.security.StorageType" json:"type,omitempty"`
}

func (m *KeyQuery) Reset()                    { *m = KeyQuery{} }
func (m *KeyQuery) String() string            { return proto.CompactTextString(m) }
func (*KeyQuery) ProtoMessage()               {}
func (*KeyQuery) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *KeyQuery) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *KeyQuery) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *KeyQuery) GetType() StorageType {
	if m != nil {
		return m.Type
	}
	return StorageType_PERMANENTLY
}

type KeyInfo struct {
	KeyId      int64       `protobuf:"varint,1,opt,name=keyId" json:"keyId,omitempty"`
	Key        []byte      `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	ExpireMs   int64       `protobuf:"varint,3,opt,name=expire_ms,json=expireMs" json:"expire_ms,omitempty"`
	CreateTime int64       `protobuf:"varint,4,opt,name=createTime" json:"createTime,omitempty"`
	Type       StorageType `protobuf:"varint,5,opt,name=type,enum=baseservice.security.StorageType" json:"type,omitempty"`
}

func (m *KeyInfo) Reset()                    { *m = KeyInfo{} }
func (m *KeyInfo) String() string            { return proto.CompactTextString(m) }
func (*KeyInfo) ProtoMessage()               {}
func (*KeyInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *KeyInfo) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *KeyInfo) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyInfo) GetExpireMs() int64 {
	if m != nil {
		return m.ExpireMs
	}
	return 0
}

func (m *KeyInfo) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *KeyInfo) GetType() StorageType {
	if m != nil {
		return m.Type
	}
	return StorageType_PERMANENTLY
}

type CaptchaRequest struct {
}

func (m *CaptchaRequest) Reset()                    { *m = CaptchaRequest{} }
func (m *CaptchaRequest) String() string            { return proto.CompactTextString(m) }
func (*CaptchaRequest) ProtoMessage()               {}
func (*CaptchaRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type Captcha struct {
}

func (m *Captcha) Reset()                    { *m = Captcha{} }
func (m *Captcha) String() string            { return proto.CompactTextString(m) }
func (*Captcha) ProtoMessage()               {}
func (*Captcha) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func init() {
	proto.RegisterType((*KeyGenerate)(nil), "baseservice.security.KeyGenerate")
	proto.RegisterType((*KeyQuery)(nil), "baseservice.security.KeyQuery")
	proto.RegisterType((*KeyInfo)(nil), "baseservice.security.KeyInfo")
	proto.RegisterType((*CaptchaRequest)(nil), "baseservice.security.CaptchaRequest")
	proto.RegisterType((*Captcha)(nil), "baseservice.security.Captcha")
	proto.RegisterEnum("baseservice.security.StorageType", StorageType_name, StorageType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SecurityService service

type SecurityServiceClient interface {
	// 创建一个 SRA Key
	GenerateRSAKey(ctx context.Context, in *KeyGenerate, opts ...grpc.CallOption) (*KeyInfo, error)
	// 一句 KeyId 获取创建的 Key 信息,失效或者没有,返回异常
	GetRSAKey(ctx context.Context, in *KeyQuery, opts ...grpc.CallOption) (*KeyInfo, error)
	// 创建一个随机 Key
	GenerateRandKey(ctx context.Context, in *KeyGenerate, opts ...grpc.CallOption) (*KeyInfo, error)
	// 根据 KeyId 获取随机 Key 信息
	GetRandKey(ctx context.Context, in *KeyQuery, opts ...grpc.CallOption) (*KeyInfo, error)
}

type securityServiceClient struct {
	cc *grpc.ClientConn
}

func NewSecurityServiceClient(cc *grpc.ClientConn) SecurityServiceClient {
	return &securityServiceClient{cc}
}

func (c *securityServiceClient) GenerateRSAKey(ctx context.Context, in *KeyGenerate, opts ...grpc.CallOption) (*KeyInfo, error) {
	out := new(KeyInfo)
	err := grpc.Invoke(ctx, "/baseservice.security.SecurityService/GenerateRSAKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) GetRSAKey(ctx context.Context, in *KeyQuery, opts ...grpc.CallOption) (*KeyInfo, error) {
	out := new(KeyInfo)
	err := grpc.Invoke(ctx, "/baseservice.security.SecurityService/GetRSAKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) GenerateRandKey(ctx context.Context, in *KeyGenerate, opts ...grpc.CallOption) (*KeyInfo, error) {
	out := new(KeyInfo)
	err := grpc.Invoke(ctx, "/baseservice.security.SecurityService/GenerateRandKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) GetRandKey(ctx context.Context, in *KeyQuery, opts ...grpc.CallOption) (*KeyInfo, error) {
	out := new(KeyInfo)
	err := grpc.Invoke(ctx, "/baseservice.security.SecurityService/GetRandKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SecurityService service

type SecurityServiceServer interface {
	// 创建一个 SRA Key
	GenerateRSAKey(context.Context, *KeyGenerate) (*KeyInfo, error)
	// 一句 KeyId 获取创建的 Key 信息,失效或者没有,返回异常
	GetRSAKey(context.Context, *KeyQuery) (*KeyInfo, error)
	// 创建一个随机 Key
	GenerateRandKey(context.Context, *KeyGenerate) (*KeyInfo, error)
	// 根据 KeyId 获取随机 Key 信息
	GetRandKey(context.Context, *KeyQuery) (*KeyInfo, error)
}

func RegisterSecurityServiceServer(s *grpc.Server, srv SecurityServiceServer) {
	s.RegisterService(&_SecurityService_serviceDesc, srv)
}

func _SecurityService_GenerateRSAKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyGenerate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).GenerateRSAKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/baseservice.security.SecurityService/GenerateRSAKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).GenerateRSAKey(ctx, req.(*KeyGenerate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_GetRSAKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).GetRSAKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/baseservice.security.SecurityService/GetRSAKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).GetRSAKey(ctx, req.(*KeyQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_GenerateRandKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyGenerate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).GenerateRandKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/baseservice.security.SecurityService/GenerateRandKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).GenerateRandKey(ctx, req.(*KeyGenerate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_GetRandKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).GetRandKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/baseservice.security.SecurityService/GetRandKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).GetRandKey(ctx, req.(*KeyQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _SecurityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "baseservice.security.SecurityService",
	HandlerType: (*SecurityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateRSAKey",
			Handler:    _SecurityService_GenerateRSAKey_Handler,
		},
		{
			MethodName: "GetRSAKey",
			Handler:    _SecurityService_GetRSAKey_Handler,
		},
		{
			MethodName: "GenerateRandKey",
			Handler:    _SecurityService_GenerateRandKey_Handler,
		},
		{
			MethodName: "GetRandKey",
			Handler:    _SecurityService_GetRandKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "securityService.proto",
}

func init() { proto.RegisterFile("securityService.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x5d, 0x8f, 0xd2, 0x4e,
	0x14, 0xc6, 0xff, 0xc3, 0xcb, 0x7f, 0xe1, 0x60, 0x80, 0x4c, 0x30, 0x41, 0x54, 0xc4, 0xaa, 0xb1,
	0xd9, 0xc4, 0x36, 0x62, 0xbc, 0xd1, 0xab, 0x75, 0x43, 0x36, 0x1b, 0x04, 0xb1, 0x70, 0xa3, 0x37,
	0x66, 0x28, 0xc7, 0xda, 0x60, 0x3b, 0x75, 0x66, 0xd8, 0xec, 0x5c, 0xae, 0x5e, 0x7a, 0xe9, 0x67,
	0xf0, 0x13, 0xf9, 0x15, 0xfc, 0x20, 0x86, 0xa1, 0x60, 0x89, 0xa0, 0xf1, 0xe5, 0xee, 0xcc, 0xc9,
	0x39, 0xe7, 0xf7, 0x3c, 0xcd, 0x93, 0xc2, 0x65, 0x89, 0xfe, 0x42, 0x84, 0x4a, 0x8f, 0x51, 0x9c,
	0x85, 0x3e, 0x3a, 0x89, 0xe0, 0x8a, 0xd3, 0xc6, 0x94, 0x49, 0x94, 0x69, 0x6b, 0x3d, 0xd2, 0xba,
	0x16, 0x70, 0x1e, 0xbc, 0x45, 0x97, 0x25, 0xa1, 0xcb, 0xe2, 0x98, 0x2b, 0xa6, 0x42, 0x1e, 0xcb,
	0xd5, 0x8e, 0xf5, 0x91, 0x40, 0xa5, 0x8f, 0xfa, 0x04, 0x63, 0x14, 0x4c, 0x21, 0x6d, 0x40, 0x51,
	0xfa, 0x3c, 0xc1, 0x26, 0xe9, 0x10, 0xbb, 0xec, 0xad, 0x1e, 0x94, 0x42, 0x61, 0x1a, 0x2a, 0xd9,
	0xcc, 0x75, 0x88, 0x5d, 0xf4, 0x4c, 0x4d, 0x1f, 0x42, 0x41, 0xe9, 0x04, 0x9b, 0xf9, 0x0e, 0xb1,
	0xab, 0xdd, 0x9b, 0xce, 0x2e, 0xb8, 0x33, 0x56, 0x5c, 0xb0, 0x00, 0x27, 0x3a, 0x41, 0xcf, 0x8c,
	0xd3, 0xab, 0x50, 0xc6, 0xf3, 0x24, 0x14, 0xf8, 0x2a, 0x92, 0xcd, 0x42, 0x87, 0xd8, 0x79, 0xaf,
	0xb4, 0x6a, 0x0c, 0xa4, 0x15, 0x41, 0xa9, 0x8f, 0xfa, 0xf9, 0x02, 0x85, 0xde, 0xa3, 0xa4, 0x01,
	0xc5, 0x39, 0xea, 0xd3, 0x99, 0x91, 0x92, 0xf7, 0x56, 0x8f, 0x3f, 0xd4, 0x62, 0x7d, 0x26, 0x70,
	0xd0, 0x47, 0x7d, 0x1a, 0xbf, 0xe6, 0xdf, 0x0f, 0x93, 0xec, 0xe1, 0x3a, 0xe4, 0xe7, 0xa8, 0x0d,
	0xec, 0x92, 0xb7, 0x2c, 0xb7, 0xf5, 0xe7, 0xb7, 0xf5, 0xd3, 0x36, 0x80, 0x2f, 0x90, 0x29, 0x9c,
	0x84, 0x11, 0xa6, 0xee, 0x32, 0x9d, 0x8d, 0xce, 0xe2, 0xef, 0xe9, 0xac, 0x43, 0xf5, 0x98, 0x25,
	0xca, 0x7f, 0xc3, 0x3c, 0x7c, 0xb7, 0x40, 0xa9, 0xac, 0x32, 0x1c, 0xa4, 0x9d, 0xc3, 0x2e, 0x54,
	0x32, 0x1b, 0xb4, 0x06, 0x95, 0x51, 0xcf, 0x1b, 0x1c, 0x0d, 0x7b, 0xc3, 0xc9, 0xd3, 0x17, 0xf5,
	0xff, 0x68, 0x09, 0x0a, 0xcf, 0x86, 0xc7, 0xbd, 0x3a, 0x59, 0x56, 0x93, 0xde, 0x60, 0x54, 0xcf,
	0x75, 0x2f, 0x0a, 0x50, 0x1b, 0x6f, 0x67, 0x88, 0x5e, 0x10, 0xa8, 0xae, 0x63, 0xe0, 0x8d, 0x8f,
	0xfa, 0xa8, 0xe9, 0x1e, 0x81, 0x99, 0xbc, 0xb4, 0xae, 0xef, 0x1d, 0x59, 0x7e, 0x55, 0xeb, 0xde,
	0xfb, 0x2f, 0x5f, 0x3f, 0xe5, 0xee, 0x5a, 0x56, 0x66, 0xca, 0x24, 0xf1, 0xec, 0xbe, 0x1b, 0xa4,
	0x37, 0x5c, 0x29, 0xd8, 0x1c, 0xf5, 0x23, 0x72, 0x48, 0x13, 0x28, 0x9f, 0xa0, 0x4a, 0xe9, 0xed,
	0xbd, 0xa7, 0x4d, 0x40, 0x7e, 0x85, 0xbe, 0x6d, 0xd0, 0x6d, 0x7a, 0x65, 0x07, 0x5a, 0xc8, 0x35,
	0xf1, 0x03, 0x81, 0xda, 0xc6, 0x35, 0x8b, 0x67, 0xff, 0xc6, 0xb6, 0x63, 0xd8, 0xb6, 0x75, 0xeb,
	0x67, 0xb6, 0x05, 0x8b, 0x67, 0xa9, 0x0a, 0x01, 0xb0, 0xf4, 0x9d, 0xf2, 0xff, 0xd2, 0xf8, 0x1d,
	0x03, 0xbf, 0x41, 0x5b, 0xbb, 0x8c, 0x6f, 0x98, 0x4f, 0x46, 0x2f, 0x87, 0x41, 0xa8, 0x9c, 0xf3,
	0x90, 0x05, 0x8c, 0x07, 0x8c, 0x3b, 0x3e, 0x8f, 0xdc, 0xcc, 0x8a, 0xcc, 0x3e, 0xb2, 0xb5, 0xcf,
	0xa3, 0x88, 0xc7, 0x8f, 0x7f, 0xe8, 0x4c, 0xff, 0x37, 0xbf, 0x94, 0x07, 0xdf, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x7f, 0xac, 0xeb, 0x6e, 0x9f, 0x04, 0x00, 0x00,
}
