// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sequenceService.proto

package baseservicecommon

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SequenceGenerate struct {
}

func (m *SequenceGenerate) Reset()                    { *m = SequenceGenerate{} }
func (m *SequenceGenerate) String() string            { return proto.CompactTextString(m) }
func (*SequenceGenerate) ProtoMessage()               {}
func (*SequenceGenerate) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type SequenceId struct {
	SequenceId int64 `protobuf:"varint,1,opt,name=sequenceId" json:"sequenceId,omitempty"`
}

func (m *SequenceId) Reset()                    { *m = SequenceId{} }
func (m *SequenceId) String() string            { return proto.CompactTextString(m) }
func (*SequenceId) ProtoMessage()               {}
func (*SequenceId) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *SequenceId) GetSequenceId() int64 {
	if m != nil {
		return m.SequenceId
	}
	return 0
}

type SequenceInfo struct {
	SequenceId int64 `protobuf:"varint,1,opt,name=sequenceId" json:"sequenceId,omitempty"`
	CreateTime int64 `protobuf:"varint,2,opt,name=createTime" json:"createTime,omitempty"`
	NodeId     int64 `protobuf:"varint,3,opt,name=nodeId" json:"nodeId,omitempty"`
	Index      int64 `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	DcID       int64 `protobuf:"varint,6,opt,name=dcID" json:"dcID,omitempty"`
}

func (m *SequenceInfo) Reset()                    { *m = SequenceInfo{} }
func (m *SequenceInfo) String() string            { return proto.CompactTextString(m) }
func (*SequenceInfo) ProtoMessage()               {}
func (*SequenceInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *SequenceInfo) GetSequenceId() int64 {
	if m != nil {
		return m.SequenceId
	}
	return 0
}

func (m *SequenceInfo) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *SequenceInfo) GetNodeId() int64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *SequenceInfo) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *SequenceInfo) GetDcID() int64 {
	if m != nil {
		return m.DcID
	}
	return 0
}

func init() {
	proto.RegisterType((*SequenceGenerate)(nil), "baseservice.sequence.SequenceGenerate")
	proto.RegisterType((*SequenceId)(nil), "baseservice.sequence.SequenceId")
	proto.RegisterType((*SequenceInfo)(nil), "baseservice.sequence.SequenceInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SequenceService service

type SequenceServiceClient interface {
	// 获取一个新的 Sequence
	GenerateSequence(ctx context.Context, in *SequenceGenerate, opts ...grpc.CallOption) (*SequenceId, error)
	// 解析 Sequence 的信息
	GetSequenceInfo(ctx context.Context, in *SequenceId, opts ...grpc.CallOption) (*SequenceInfo, error)
}

type sequenceServiceClient struct {
	cc *grpc.ClientConn
}

func NewSequenceServiceClient(cc *grpc.ClientConn) SequenceServiceClient {
	return &sequenceServiceClient{cc}
}

func (c *sequenceServiceClient) GenerateSequence(ctx context.Context, in *SequenceGenerate, opts ...grpc.CallOption) (*SequenceId, error) {
	out := new(SequenceId)
	err := grpc.Invoke(ctx, "/baseservice.sequence.SequenceService/GenerateSequence", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceServiceClient) GetSequenceInfo(ctx context.Context, in *SequenceId, opts ...grpc.CallOption) (*SequenceInfo, error) {
	out := new(SequenceInfo)
	err := grpc.Invoke(ctx, "/baseservice.sequence.SequenceService/GetSequenceInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SequenceService service

type SequenceServiceServer interface {
	// 获取一个新的 Sequence
	GenerateSequence(context.Context, *SequenceGenerate) (*SequenceId, error)
	// 解析 Sequence 的信息
	GetSequenceInfo(context.Context, *SequenceId) (*SequenceInfo, error)
}

func RegisterSequenceServiceServer(s *grpc.Server, srv SequenceServiceServer) {
	s.RegisterService(&_SequenceService_serviceDesc, srv)
}

func _SequenceService_GenerateSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SequenceGenerate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceServiceServer).GenerateSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/baseservice.sequence.SequenceService/GenerateSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceServiceServer).GenerateSequence(ctx, req.(*SequenceGenerate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceService_GetSequenceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SequenceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceServiceServer).GetSequenceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/baseservice.sequence.SequenceService/GetSequenceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceServiceServer).GetSequenceInfo(ctx, req.(*SequenceId))
	}
	return interceptor(ctx, in, info, handler)
}

var _SequenceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "baseservice.sequence.SequenceService",
	HandlerType: (*SequenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateSequence",
			Handler:    _SequenceService_GenerateSequence_Handler,
		},
		{
			MethodName: "GetSequenceInfo",
			Handler:    _SequenceService_GetSequenceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sequenceService.proto",
}

func init() { proto.RegisterFile("sequenceService.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x41, 0x4b, 0xc3, 0x30,
	0x1c, 0xc5, 0xe9, 0xe6, 0x76, 0xf8, 0x23, 0x6c, 0x84, 0x29, 0x65, 0x0c, 0x99, 0x39, 0xa8, 0x88,
	0xb4, 0xa8, 0x37, 0xbd, 0x89, 0x30, 0x76, 0x11, 0x71, 0x9e, 0xbc, 0x65, 0xe9, 0x7f, 0x25, 0x60,
	0xf3, 0x9f, 0x4d, 0x1c, 0x3b, 0x8a, 0xe0, 0x5d, 0xf0, 0xea, 0xb7, 0xf2, 0x2b, 0xf8, 0x41, 0x64,
	0x59, 0x33, 0x3b, 0x15, 0x7b, 0xcb, 0x7b, 0xef, 0xf7, 0x4a, 0xfa, 0x08, 0x6c, 0x19, 0x7c, 0x78,
	0x44, 0x2d, 0x71, 0x84, 0xf9, 0x4c, 0x49, 0x8c, 0xa6, 0x39, 0x59, 0x62, 0x9d, 0xb1, 0x30, 0x68,
	0x0a, 0xcb, 0x23, 0xdd, 0x5e, 0x4a, 0x94, 0xde, 0x63, 0x2c, 0xa6, 0x2a, 0x16, 0x5a, 0x93, 0x15,
	0x56, 0x91, 0x36, 0xcb, 0x0e, 0x67, 0xd0, 0x1e, 0x15, 0xe4, 0x00, 0x35, 0xe6, 0xc2, 0x22, 0x3f,
	0x02, 0xf0, 0xde, 0x30, 0x61, 0x3b, 0x00, 0x66, 0xa5, 0xc2, 0xa0, 0x1f, 0x1c, 0xd4, 0x6f, 0x4a,
	0x0e, 0x7f, 0x0d, 0x60, 0x73, 0x85, 0xeb, 0x09, 0x55, 0x15, 0x16, 0xb9, 0xcc, 0x51, 0x58, 0xbc,
	0x55, 0x19, 0x86, 0xb5, 0x65, 0xfe, 0xed, 0xb0, 0x6d, 0x68, 0x6a, 0x4a, 0x16, 0xdd, 0xba, 0xcb,
	0x0a, 0xc5, 0x3a, 0xd0, 0x50, 0x3a, 0xc1, 0x79, 0xd8, 0x70, 0xf6, 0x52, 0x30, 0x06, 0x1b, 0x89,
	0x1c, 0x5e, 0x86, 0x4d, 0x67, 0xba, 0xf3, 0xc9, 0x7b, 0x0d, 0x5a, 0xa3, 0xf5, 0x89, 0xd8, 0x4b,
	0x00, 0x6d, 0xff, 0x87, 0x3e, 0x63, 0x7b, 0xd1, 0x5f, 0x93, 0x45, 0x3f, 0x17, 0xe9, 0xf6, 0xff,
	0xe7, 0x86, 0x09, 0xdf, 0x7f, 0xfe, 0xf8, 0x7c, 0xab, 0xed, 0xf2, 0x5e, 0x09, 0x74, 0x93, 0xcf,
	0x8e, 0x63, 0xcf, 0x9b, 0xb3, 0xe0, 0x90, 0x3d, 0x05, 0xd0, 0x1a, 0xa0, 0x5d, 0x5b, 0xac, 0xf2,
	0xf3, 0x5d, 0x5e, 0x41, 0xe8, 0x09, 0xf9, 0x2b, 0xb0, 0xaa, 0x2b, 0x5c, 0x5c, 0xdf, 0x5d, 0xa5,
	0xca, 0x46, 0x73, 0x25, 0x52, 0x41, 0xa9, 0xa0, 0x48, 0x52, 0x16, 0x97, 0x4a, 0xa6, 0x2c, 0xca,
	0x67, 0x49, 0x59, 0x46, 0xfa, 0xfc, 0x97, 0x33, 0x6e, 0xba, 0xc7, 0x74, 0xfa, 0x15, 0x00, 0x00,
	0xff, 0xff, 0x9b, 0xb6, 0xff, 0x85, 0x99, 0x02, 0x00, 0x00,
}
