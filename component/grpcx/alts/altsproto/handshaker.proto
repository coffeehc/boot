// Copyright 2018 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// The canonical version of this proto can be found at
// https://github.com/grpc/grpc-proto/blob/master/grpc/gcp/handshaker.proto

syntax = "proto3";

package grpc.alts;


option go_package = "github.com/coffeehc/boot/component/grpcx/alts/altsproto";
option java_multiple_files = true;
option java_outer_classname = "HandshakerProto";
option java_package = "io.grpc.alts.internal";

enum SecurityLevel {
    SECURITY_NONE = 0;
    INTEGRITY_ONLY = 1;
    INTEGRITY_AND_PRIVACY = 2;
}

// Max and min supported RPC protocol versions.
message RpcProtocolVersions {
    // RPC version contains a major version and a minor version.
    message Version {
        uint32 major = 1;
        uint32 minor = 2;
    }
    // Maximum supported RPC version.
    Version max_rpc_version = 1;
    // Minimum supported RPC version.
    Version min_rpc_version = 2;
}

message AltsContext {
    // The application protocol negotiated for this connection.
    string application_protocol = 1;

    // The record protocol negotiated for this connection.
    string record_protocol = 2;

    // The security level of the created secure channel.
    SecurityLevel security_level = 3;

    // The peer service account.
    string peer_service_account = 4;

    // The local service account.
    string local_service_account = 5;

    // The RPC protocol versions supported by the peer.
    RpcProtocolVersions peer_rpc_versions = 6;

    // Additional attributes of the peer.
    map<string, string> peer_attributes = 7;
}

enum HandshakeProtocol {
    // Default value.
    HANDSHAKE_PROTOCOL_UNSPECIFIED = 0;

    // TLS handshake protocol.
    TLS = 1;

    // Application Layer Transport Security handshake protocol.
    ALTS = 2;
}

enum NetworkProtocol {
    NETWORK_PROTOCOL_UNSPECIFIED = 0;
    TCP = 1;
    UDP = 2;
}

message Endpoint {
    // IP address. It should contain an IPv4 or IPv6 string literal, e.g.
    // "192.168.0.1" or "2001:db8::1".
    string ip_address = 1;

    // Port number.
    int32 port = 2;

    // Network protocol (e.g., TCP, UDP) associated with this endpoint.
    NetworkProtocol protocol = 3;
}

message Identity {
    oneof identity_oneof {
        // Service account of a connection endpoint.
        string service_account = 1;
        // Hostname of a connection endpoint.
        string hostname = 2;
    }
    // Additional attributes of the identity.
    map<string, string> attributes = 3;
    string service_name = 4; //新加的，后面考虑怎么去掉
}

message StartClientHandshakeReq {
    HandshakeProtocol handshake_security_protocol = 1;
    repeated string application_protocols = 2;
    repeated string record_protocols = 3;
    repeated Identity target_identities = 4;
    Identity local_identity = 5;
    Endpoint local_endpoint = 6;
    Endpoint remote_endpoint = 7;
    string target_name = 8;
    RpcProtocolVersions rpc_versions = 9;
    uint32 max_frame_size = 10;
    string access_token = 11;
}

message ServerHandshakeParameters {
    repeated string record_protocols = 1;
    repeated Identity local_identities = 2;
    optional string token = 3;
}

message StartServerHandshakeReq {
    repeated string application_protocols = 1;
    map<int32, ServerHandshakeParameters> handshake_parameters = 2;
    bytes in_bytes = 3;
    Endpoint local_endpoint = 4;
    Endpoint remote_endpoint = 5;
    RpcProtocolVersions rpc_versions = 6;
    uint32 max_frame_size = 7;
}

message NextHandshakeMessageReq {
    bytes in_bytes = 1;
    uint32 network_latency_ms = 2;
}

message HandshakerReq {
    oneof req_oneof {
        StartClientHandshakeReq client_start = 1;
        StartServerHandshakeReq server_start = 2;
        NextHandshakeMessageReq next = 3;
    }
}

message HandshakerResult {
    string application_protocol = 1;
    string record_protocol = 2;
    bytes key_data = 3;
    Identity peer_identity = 4;
    Identity local_identity = 5;
    bool keep_channel_open = 6;
    RpcProtocolVersions peer_rpc_versions = 7;
    uint32 max_frame_size = 8;
}

message HandshakerStatus {
    uint32 code = 1;
    string details = 2;
}

message HandshakerResp {
    bytes out_frames = 1;
    uint32 bytes_consumed = 2;
    HandshakerResult result = 3;
    HandshakerStatus status = 4;
}

service HandshakerService {
    rpc DoHandshake(stream HandshakerReq) returns (stream HandshakerResp) {}
}